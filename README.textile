h1. Ariane Dynamic Breadcrumb Sample App

 A PoC for the "Ariane":https://github.com/simonc/ariane breadcrumb gem, forked and modified to support a session and stack based dynamic breadcrumb list.

h2. Features

* Automatic breadcrumb generation based on controller and action name (needs i18n localization feature)
* Manual crumb override
* Custom crumb levels for 'break-out' tasks
* Return_to link renderer


h2. Installation

See the original usage and installation instructions for the published gem at "Ariane":https://github.com/simonc/ariane

The sample application shown here uses the forked and modified Ariane library, which now includes a session based breadcrumb array that will persist across requests. Crumbs with lower crumb levels will @pop@ crumbs with >= crumb levels from the breadcrumb array.

To experiment with the sample app - clone both the forked ariane and ariane-sample repositories.

bc. git clone git://github.com/58bits/ariane.git
git checkout session #checkout the topic branch for this feature
git clone git://github.com/58bits/ariane-sample.git

Run @bundle install@ and @rake db:migrate@ against ariane-sample

Run @rails s@ to start the sample app.

The sample app references the forked "Ariane":https://github.com/simonc/ariane lib directory via an initializer. The ariane repository and sample app can be placed anywhere, but they must be located at the same directory level e.g. @~/Code/ariane@ and @~/Code/ariane-sample@.

The Rails initiializer:

bc.. #~/Code/ariane-sample/config/initializers/ariane.rb 
$:.push File.expand_path("../../../../ariane/lib", __FILE__)
require 'ariane'

Ariane.configure do |config|
    config.dynamic_breadcrumb = true
end

p. Ariane is configured in the sample app to use the dynamic session based breadcrumb via @config.dynamic_breadcrumb = true@ (ideally using the database or memcache session stores).


h2. Use Cases

h3. Scenario 1: auto_set_breadcrumb with levels override in a controller

The @application_controller.rb@ has the following @before_filter@:

bc.. class ApplicationController < ActionController::Base
  protect_from_forgery
  before_filter :auto_set_breadcrumb
end

p. The @CustomersContoller@ has custom crumb levels assigned via the @prepend_before_filter@.

bc.. class CustomersController < ApplicationController
  prepend_before_filter { |controller| controller.set_crumb_levels :index => 4, :default => 5}
...

p. We could have assigned a custom crumb level to each action, but in most cases only two levels will be needed - one for the index action, and another for the remaining actions. We can use the @:default@ symbol to set all of the actions to a given level, and then set the index action to its own level (4 in this case). 

p. Start the ariane-sample app and create a new Widget - then break-out of the New Widget task and create a New Customer. Once the customer has been created, return to the New Widget task.

p. NOTE: Manual crumb levels and labels can be added inside any action via the regular @ariane.add@ method.   

h3. Scenario 2: auto_set_breadcrumb with crumbs override in a controller 

The @application_controller.rb@ has the @auto_set_breadcrumb@ method moved to a @prepend_before_filter@:

bc.. class ApplicationController < ActionController::Base
  protect_from_forgery
  prepend_before_filter :auto_set_breadcrumb
end

p. The @AddressesContoller@ has custom breadcrumbs assigned via a @before_filter@ and a private helper method.

bc.. class AddressesController < ApplicationController
  before_filter :set_address_crumbs

  ...

  private

  def set_address_crumbs
    case self.action_name
    when 'index'
      label = "Funky Addresses"; level = 2
    when 'show'
      label = "Funky Address"; level = 3
    when 'new', 'create'
      label = "Create that Funky Address!"; level = 3
    when 'edit', 'update'
      label = "Change that Funky Address!"; level = 3
    when 'delete'
      label = "Address be Gone!"; level = 3
    end

   ariane.add label, request.fullpath, level
  end

h3. Scenario 3: breadcrumbs are set on a per controller basis

p. In this case - @auto_set_breadcrumb@ is not used in either a @prepend_before_filter@ or @before_filter@ in the application contoller, and the dynamic breadcrumb trail is set using a helper method on a per controller basis as shown in the AddressController above.

h2. Issues

* The current implementation depends on a root_path definition in routes.rb
* The current implementation will crash on nil[] error if no crumbs have been set and ariane.render is called in the view.

h2. TODO

Create an @ariane.return_to@ render method to generate a return_to html link that that can be used as a link or button in addition to the breadcrumb trail to return to the previous task.
